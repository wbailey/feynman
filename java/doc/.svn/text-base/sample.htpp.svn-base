#include<header.html>
	<div id="docContent">
		<h1>Coding the Sample Application</h1>
		<p align="left">
		The sample application is setup to simulate a ball being thrown up in the air without
		drag under Newton's Law of Gravity.  The Cartesian coordinate system has been chosen for the 
		simulation.  These choices mean that we want to work within the Framework using the 
		CartesianSytem and CartesianObject classes.
		</p>
		<h3>Ball.java</h3>
		<p align="left">
		The first class that needs to be developed is an implementation of the <em>PhysicalObject</em>
		that extends CartesianObject.
		The Ball class does this in the sample application.  The source code can be viewed by clicking 
		<a href="#" onClick="DynaWin('Ball.java.html', '400', '550', '0', '0')";>here</a>.  We will 
		go through the code for this class in detail so that even those new to Java can get a feel
		for what is being done and why.
		</p>
		<p align="left">
		Source code denoted between the <tt>/** ... */</tt> lines are special comments for the
		JavaDoc utility.   If you are not familiar with this utility, read about it in the 
		<em>Learning Java</em> referenced the <a href="framework.html">Framework Design</a> section.
		reference. The first part of the class tells the compiler that we are are going to need to 
		use the CartesianObject class in the feynman.framework.system package.  The class definition
		line tells the compiler that we are extending this class.
<pre>
/*
 * Feynman Java Simulation Framework Sample Application
 *
 * $author: Wes Bailey$
 */
import feynman.framework.system.CartesianObject;

/**
 * Bean implementation of &lt;b&gt;CartesianObject&lt;/b&gt; to define the physical
 * characteristics of a ball in the Cartesian coordinate system.
 */
public class Ball extends CartesianObject {
</pre>
		Notice the JavaDoc says the Ball class is a Bean implementation of the CartesianObject
		class.  This is true because it is a JavaBean and more importantly this class can be
		thought of a reference to the actual memory component being used.  For experienced C 
		programmers think of this as an easier way to work with pointers!
		</p>
		<p align="left">
		The next part of the Bean are the <em>local instance variables</em>.  This terminology
		refers to the scope of these named variables.  If this is not clear to you, then check 
		the <a href="framework.html">Learning Java</a> reference.
<pre>
	// ---------------------------------------- instance variables.

	// Velocity components
	private double vx;
	private double vy;
	private double vz;

	// Used to calculate the max height.
	private double vyold;
	private double maxheight;

	// Acceleration components.
	private double ax;
	private double ay;
	private double az;
</pre>
		If you notice, the <b>x</b>, <b>y</b> and <b>z</b> components are not defined like the 
		velocity and acceleration components have been?  The reason is because the CartesionObject
		parent class provides them.  This illustrates the power of a property known as 
		<em>inheritance</em> in Object Oriented languages.  Since Ball extends CartesianObject, it
		can access the instance variables and methods defined in CartesianObject.  This also 
		illustrates the power of the Framework in that many of these types of capabilities are 
		provided by it so you don't have to code it.
		</p>
		<p align="left">
		Two other variables have been defined.  The <tt>vyold</tt> and the <tt>maxheight</tt>
		are used in the calculation of the maxmimum height that the ball achieves during its flight.
		How these are used will be seen when we discuss the implementation of the PhysicalMeasurement
		class.
		</p>
		<p align="left">
		The rest of the source to this point is a number of <em>getter</em> and <em>setter</em> methods
		that provide public access to our privately defined instance variables.  This is the way a bean
		is developed and is a good programming practice to follow.  No longer do you allow other methods
		and classes direct access to your instance variables.  Instead they are manipulated through the
		get and set methods shown below.  This will be a new concept for traditional C and C++ 
		developers who might not have experience developing JavaBeans.  Some of the source
		for the Ball class is listed below without the JavaDoc included.  For a complete view of the
		class open this
		<a href="#" onClick="DynaWin('Ball.java.html', '400', '550', '0', '0')";>Ball.java</a> and 
		read the color coded source.
<pre>

	...
	
	public void setVy(double vy) {
		this.vy = vy;
	}
	
	public double getVy() {
		return vy;
	}
	
	public void setVyold(double vyold) {
		this.vyold = vyold;
	}
	
	...
	
	public void setMaxheight(double maxheight) {
		this.maxheight = maxheight;
	}
	
	public double getMaxheight() {
		return maxheight;
	}

</pre>
		For those of you new to Java notice the usage of the <tt>this</tt> keyword when assigning 
		the value of the local instance variable to the parameter value.  The keyword <tt>this</tt>
		refers to the local instance variable and allows distinction between it and the parameter
		value of the same name.  Regardless of whether the parameter value has the same name as the
		instance variable, it is a good programming practice when developing a Bean to use 
		<tt>this</tt> when assigning values to instance variables.
		</p>
		<h3>Setup.java</h3>
		<p align="left">
		Now that that we have a PhysicalObject, the next class that we need to develop
		is one that implements the PhysicalConfiguration interface.  The main purpose
		of the Sample.java class is to provide the initial conditions of all of the 
		PhysicalObjects in the PhysicalSystem of the simulation.  The sample 
		application only has a single CartesianObject so it must provide the initial
		conditions for the Ball in the CartesianSystem.  Again we will leave out the JavaDoc
		for brevity in the source listings below.  You can view the class
		<a href="#" onClick="DynaWin('Setup.java.html', '400', '550', '0', '0')";>Setup.java</a>
		and read the color coded source code.
<pre>
import java.util.Iterator;
import feynman.framework.system.PhysicalConfiguration;
import feynman.framework.system.PhysicalSystem;
</pre>
		Again we are just telling the compiler what classes we will need.  The <tt>Iterator</tt>
		class in the <em>java.util</em> package is part of the Java Collections Framework.  Again
		you can reference <a href="framework.html">Learning Java</a> for a complete understanding
		of the Collections Framework.  For now just think of a collection of objects and the role
		of the <tt>Iterator</tt> is to provide a mechanism for obtaining references to the objects
		that are in the collection.  The PhysicalConfiguration class is needed because we are
		extending it and the PhysicalSystem is the collection that the <tt>Iterator</tt> will use.
		</p>
		<p align="left">
		Notice in the class definition we are providing our implementation of the 
		PhysicalConfiguration as well as creating instance variables of the type <b>Ball</b> and
		<b>Iterator</b>.
<pre>
public class Setup implements PhysicalConfiguration {
	
	// ------------------------------------- instance variables.
	private Iterator i;
	private Ball b;
</pre>
		Notice the use of the keyword <em>implements</em> instead of <em>extends</em> that was
		used in the Ball class definition.  The reason is that PhysicalConfiguration is an 
		<em>interface</em> and not an <em>Abstract Class</em> like the CartesianObject class is.
		Though there are always reasons for using each, when designing the Framework I used the
		this simple rule to decide which to use.  If there is anything that all sub-classes will
		share in common, then an <em>Abstract Class</em> is used since the sub-class will inherit
		the instance variable and methods.  However, if there was nothing that could be shared or
		if the implementer is to have complete freedom on the implementation (ie meaning how to 
		write the code), then an <em>interface</em> has been used.  
		</p>
		<p align="left">
		For a CartesianObject, any sub-class of it will need and use its definition of the 
		<tt>x</tt>, <tt>y</tt> and <tt>z</tt> instance variables and their corresponding getter and
		setter methods.	The PhysicalConfiguration will be different for every single application
		that uses the Framework.  It is extremely unlikely that any instance variables and code
		could be shared therefore it is defined as an interface.
		</p>
		<p align="left">
		The rest of the Setup class is shown below.  Notice that it provides an implementation
		of the <tt>configure</tt> method as required by the PhysicalConfiguration interface.
<pre>
	public void configure(PhysicalSystem ps) {
		
		// Retrieve the reference to the particle from the physical system.
		i = ps.iterator();
		b = (Ball) i.next();
		
		// Setup its intial height and velocity.
		b.setY(0.0);
		b.setVy(10.0);
		
	}
</pre>
		The argument to the <tt>configure</tt> method is a PhysicalSystem.  Remember this is our
		collection and every collection can create an iterator that allows reference to all objects
		that are present in it.  An	<tt>Iterator</tt> is created and then used to retrieve the reference to our 
		<b>Ball</b> object.  Normally one would see a code fragment like the following
<pre>
while(i.hasNext()) {
	b = (Ball) i.next();
}
</pre>
		but since we only have a single object in our PhysicalSystem collection in the sample 
		application, the <tt>while</tt> loop is not necessary.
		</p>
		<p align="left">
		Since the collection just contains PhysicalObjects, the reference
		to the Ball object must be <em>cast</em> into the correct type in order to access the methods
		specific to that object.  Since Ball is lower on the class hierarchy than a PhysicalObject this
		is commonly	referred to as <em>Downcasting</em>.  Once the Ball has been properly referrenced,
		then its initial height and velocity are set using the appropriate setter methods.  If the 
		object	retrieved from the Iterator had not been downcast, then an incompatible types error
		would occur because the instance variable <tt>b</tt> is of the type Ball.  An example of the
		compilation error that is generated is shown below.
<pre>
wbailey:/tmp/sample_app> ant
Buildfile: build.xml

prepare:

build:
    [javac] Compiling 1 source file to /tmp/sample_app/classes
    [javac] /tmp/sample_app/src/Setup.java:32: incompatible types
    [javac] found   : java.lang.Object
    [javac] required: Ball
    [javac]             b =  i.next();
    [javac]                            ^
    [javac] 1 error

BUILD FAILED
file:/tmp/sample_app/build.xml:32: Compile failed; see the compiler error
output for details.
</pre>
		The compiler tells you that it found a <em>java.lang.Object</em> and is requiring
		a <em>Ball</em> instead.  One could have initially cast the <tt>b</tt> instance variable
		as a CartesianObject, but this would also cause a compilation error as shown below:
<pre>
wbailey:/tmp/sample_app> ant      
Buildfile: build.xml

prepare:

build:
    [javac] Compiling 1 source file to /tmp/sample_app/classes
    [javac] /tmp/sample_app/src/Setup.java:37: cannot resolve symbol
    [javac] symbol  : method setVy  (double)
    [javac] location: class feynman.framework.system.CartesianObject
    [javac]             b.setVy(10.0);
    [javac]                  ^
    [javac] 1 error

BUILD FAILED
file:/tmp/sample_app/build.xml:32: Compile failed; see the compiler error 
output for details.
</pre>
		This happens because to the CartesianObject, it does not have any knowledge of the 
		childs methods or instance variables.  If you come accross compilation errors like
		the ones that have been demonstrated here, it is probably related to an improper or lack
		of a cast to the correct type.
		</p>
		<h3>SimpleGravity.java</h3>
		<p align="left">
		The next interface that needs to be implemented is the PhysicalAlgorithm.  The main 
		purpose of this class is to provide the guts of the simulation.  The equations of motion
		for our ball are going to be numerically integrated using the Eurler algorithm.  Again
		examining the necessary classes for compilation listed below:
<pre>
import java.util.Iterator;
import feynman.framework.system.PhysicalAlgorithm;
import feynman.framework.system.PhysicalSystem;
import feynman.framework.simulation.Simulation;
</pre>
		The Iterator and PhysicalSystem are used as there were in the Setup class.  In addition
		the PhysicalAlgorithm is included so that the SimpleGravity class can implement it.  The 
		Simulation class is included and why it is needed will be discussed later.  The class
		definition states it implements PhysicalAlgorithm and we also see that the <b>Ball</b>
		and <b>Iterator</b>	type local instance variables that were used in the Setup class.
<pre>
public class SimpleGravity implements PhysicalAlgorithm {
	
	// ------------------------------------- instance variables.
	private Iterator i;
	private Ball b;
</pre>
		As required by the contract of PhysicalAlgorithm, the SimpleGravity class provides
		an implementation for the <tt>calculate</tt> method as shown below:
<pre>
	public void calculate(Simulation sim, PhysicalSystem ps) {
		
		// Retrieve the reference to the particle from the physical system.
		i = ps.iterator();
		b = (Ball) i.next();
		
		// Store the previous velocity calculation.
		b.setVyold(b.getVy());
		
		// Euler algorithm.
		b.setAy(-9.8);
		b.setVy(b.getVy() + b.getAy() * sim.getInterval());
		b.setY(b.getY() + b.getVy() * sim.getInterval());
		
		// Look for a change in sign in the velocity to catch the max height.
		if ((b.getVy() * b.getVyold()) &lt; 0) b.setMaxheight(b.getY());
		
		// Stop the simulation after the ball hits the ground.
		if(b.getY() &lt; 0.0) sim.setRunning(false);
		
	}
</pre>
		Here we see that the <tt>calculate</tt> has a Simulation as an argument.  The method retrieves
		a Ball from the collection for use.  The previous value of the velocity is stored for
		reference when the <tt>setVyold()</tt> method is invoked.  In this case a nested invocation
		is performed because the argument is also an invocation of the <tt>getVy()</tt> method
		of the Ball.  This method is done to implement the Euler algorithm for numerically integrating
		the equations of motions for the Ball.  The Euler algorithm for the Ball are
<pre>
A(n+1) = A(n)
v(n+1) = v(n) + A(n)*dt
y(n+1) = y(n) + v(n)*dt
</pre>
		From the source code you can see the nested invocation method is used to set the <tt>n+1</tt>
		values of the position, velocity and acceleration using the get methods to retrieve the
		<tt>n</tt> values.  We also see the first reference to methods accessible in the Simulation
		bean.  The <tt>getInterval()</tt> method retrieves the value of the interval represented
		by <em>dt</em> in the equations above.  The interval is important because its value has
		an effect on the overall accuracy of the simulation.
		</p>
		<p align="left">
		After the equations of motion are integrated and the new values of the position, velocity,
		and acceleration are updated for our Ball bean, the next step is to determine if the 
		Ball has reached its maximum height.  The methodology used to determine this is based
		on the fact that the <b>sign</b> of the y component of the velocity will change when the 
		Ball has stopped ascending and is now descending.  The <tt>if</tt> statement catches this
		and then assigns the maximum height value to the Ball bean based on the current y value.
		</p>
		<p align="left">
		The last step is an important one.  The Simulation bean has a property called <em>isRunning</em>
		that is a <b>boolean</b> value of either true or false.  The simulation initial starts
		with a value of <em>true</em> since it is actually running.  If at any point and time
		the simulation needs to stopped or is determined to be completed based on a physical condition
		being met when there are still more iterations to be done based on the parameters in
		the <em>Simulation.properties</em> file, then the <tt>setRunning()</tt> method can be 
		invoked to <em>turn off</em> the simulation.  This is important because the Controller class
		queries this property using the <tt>isRunning()</tt> method.  If this method returns a 
		<em>false</em> value, then the Controller exits is iteration loop and then invokes the
		<tt>report()</tt> method of the <em>FinalReport</em> interface.
		</p>
#include<copyright.html>
	</div>
#include<footer.html>

