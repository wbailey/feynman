<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN">
<html lang="en">
<head>
<title>Feynman Documentation</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<meta http-equiv="Content-Script-Type" content="type"/>
<meta name="description" content="Feynman Java Simulation Framework, a framework for developing simulation in Java"/>
<meta name="keywords" content="Feynman, Java, Physics, Simulation, software, framework, GNU, Mac OS X, Windows, Unix, Linux"/>
<link rel="stylesheet" href="doc.css"/>
<link rel="start" href="index.html"/>
<script type="text/javascript"> 
function DynaWin(url, h, w, l, t) {
	poph = + h + 70
	popw = + w + 30
	disp = window.open(url,"pop","height=" + poph + ",width=" + popw + ",left=" + l + ",top=" + t + "");
}
</script> 
</head>
<body>


<body>
<div id="docContent">
<pre>
<span class="code_comment_block">/*
 * $Header: /cvsroot/feynman/src/feynman/framework/controller/Controller.java,v 1.1.1.1 2002/11/12 02:25:41 wesley_bailey Exp $
 * $Revision: 1.1.1.1 $
 * $Date: 2002/11/12 02:25:41 $
 * $Copyright: Copyright (C) 2002 Path Integral Software $
 */</span>
<span class="code_package">package </span>feynman.framework.controller;

<span class="code_package">import </span>feynman.framework.simulation.Simulation;
<span class="code_package">import </span>feynman.framework.simulation.Marshaller;
<span class="code_package">import </span>feynman.framework.simulation.MarshallingException;
<span class="code_package">import </span>feynman.framework.system.PhysicalSystemFactory;
<span class="code_package">import </span>feynman.framework.system.PhysicalSystemFactoryException;
<span class="code_package">import </span>feynman.framework.system.PhysicalSystem;
<span class="code_package">import </span>feynman.framework.system.PhysicalConfiguration;
<span class="code_package">import </span>feynman.framework.system.PhysicalAlgorithm;
<span class="code_package">import </span>feynman.framework.system.PhysicalMeasurement;
<span class="code_package">import </span>feynman.framework.system.FinalReport;
<span class="code_package">import </span>feynman.framework.datastore.DataStoreFactory;
<span class="code_package">import </span>feynman.framework.datastore.DataStore;
<span class="code_package">import </span>feynman.framework.datastore.ConnectionException;
<span class="code_package">import </span>feynman.framework.datastore.InvalidDataStoreException;

<span class="code_comment_block">/**
 * &lt;p&gt;
 * This class sets up the simulation from the properties file and then runs it
 * based on the configuration classes.  The main method of this class executes
 * the steps of the simulation.  The main method of this class is defined
 * as the executable in the manifest file.  The main steps to running a simulation
 * are as follows:
 * &lt;/p&gt;
 * &lt;ol&gt;
 * &lt;li&gt; Write the source for a sub-class of PhysicalObject &lt;em&gt;i.e.&lt;/em&gt; develop
 *      a class that sub-classes CartesianObject if you are working in the Cartesian
 *      coordinate system.
 * &lt;li&gt; Write the source classes that implement the &lt;em&gt;PhysicalConfiguration, 
 *      PhysicalAlgorithm, PhysicalMeasurement&lt;/em&gt; interfaces.
 * &lt;li&gt; Setup the correct classpath to include the &lt;b&gt;feynman.jar&lt;/b&gt; and the
 *      &lt;b&gt;jakarta-regexp-xxx.jar&lt;/b&gt; files.
 * &lt;li&gt; Compile the source files you created in steps 1 and 2.
 * &lt;li&gt; Place the generated class files in the same directory as the &lt;b&gt;feynman.jar&lt;/b&gt;
 *      file or in a lib or classes sub-directory of the directory containing this file.
 * &lt;li&gt; Run the simulation from the command prompt using the usage below.
 * &lt;/ol&gt; 
 * &lt;p&gt;
 * &lt;b&gt;Usage: &lt;/b&gt; java -jar feynman.jar [propfile]
 * &lt;/p&gt;
 * &lt;p&gt;
 * For a more detailed description see the documentation included with the sample application.
 * &lt;/p&gt;
 *
 * @author Wes Bailey
 * @version $Revision: 1.1.1.1 $ $Date: 2002/11/12 02:25:41 $
 */</span>
<span class="code">public</span> class Controller {
    
    <span class="code_comment">// Define the string file name to look for the simulation properties.</span>
    static String propFilename = "Simulation.properties";
    
    <span class="code">public</span> static void <span class="code_method">main</span>(String [] args) throws ControllerException {
        
        <span class="code_comment">// See if the user defined another properties file to use.</span>
        <span class="code">switch </span>(args.length) {
            <span class="code">case </span>0:
                <span class="code_comment">// Use default file.</span>
                System.out.<span class="code_print">println</span>("Using default properties file: " + propFilename);
                <span class="code">break;</span>
            <span class="code">case </span>1:
                propFilename = args[0];
                System.out.<span class="code_print">println</span>("Using properties file: " + propFilename);
                <span class="code">break;</span>
            <span class="code">default:</span>
                <span class="code">throw new </span>ControllerException("Usage: java -jar feynman.jar propfile");
        }
        
        <span class="code_comment">// Define the classes that are used to execute the simulation.</span>
        Simulation simulation;
        PhysicalSystem physicalSystem;
        PhysicalConfiguration config;;
        PhysicalAlgorithm physicalAlgorithm;
        PhysicalMeasurement physicalMeasurement;
        FinalReport finalReport = null;
        DataStore dataStore;
        
        <span class="code_comment">// Now create the simulation environment that the user has defined using the</span>
        <span class="code_comment">// appropriate factory methods.</span>
       <span class="code"> try </span>{
            
            <span class="code_comment">// Create the simulation bean from the properties file.</span>
            simulation = Marshaller.<span class="code_method">unmarshall</span>(propFilename);
            
            <span class="code_comment">// Create a new Physical System Factory.</span>
            System.out.<span class="code_print">print</span>("Creating the physical system...");
            
            PhysicalSystemFactory sf = PhysicalSystemFactory.<span class="code_method">getInstance</span>();
            physicalSystem = (PhysicalSystem) sf.<span class="code_method">create</span>(simulation);
            
            System.out.<span class="code_print">println</span>("created");
            
            <span class="code_comment">// Configure the objects in the physical system.</span>
            System.out.<span class="code_print">print</span>("Configuring system using &lt;" + simulation.<span class="code_method">getPhysicalConfigurationClass</span>() + "&gt;...");
            
            Class configurationClazz = Class.<span class="code_method">forName</span>(simulation.getPhysicalConfigurationClass());
            config = (PhysicalConfiguration) configurationClazz.<span class="code_method">newInstance</span>();
            config.<span class="code_method">configure</span>(physicalSystem);
            
            System.out.<span class="code_print">println</span>("configured");
            
            <span class="code_comment">// Define the algorithm class to be used per iteration on the physicalSystem.</span>
            System.out.<span class="code_print">print</span>("Configuring Algorithm using &lt;" + simulation.<span class="code_method">getPhysicalAlgorithmClass</span>() + "&gt;...");
            
            Class algorithmClazz = Class.<span class="code_method">forName</span>(simulation.getPhysicalAlgorithmClass());
            physicalAlgorithm = (PhysicalAlgorithm) algorithmClazz.<span class="code_method">newInstance</span>();
            
            System.out.<span class="code_print">println</span>("configured");
            
            <span class="code_comment">// Define the measurement class to be used on the physical system.</span>
            System.out.<span class="code_print">print</span>("Configuring Physical Measurement using &lt;" + simulation.<span class="code_method">getPhysicalMeasurementClass</span>() + "&gt;...");
            
            Class measurementClazz = Class.<span class="code_method">forName</span>(simulation.getPhysicalMeasurementClass());
            physicalMeasurement = (PhysicalMeasurement) measurementClazz.<span class="code_method">newInstance</span>();
            
            System.out.<span class="code_print">println</span>("configured");
            
            <span class="code_comment">// Configure the data store for usage based on the type selected by the user.</span>
            System.out.<span class="code_print">print</span>("Configuring the Persistent Data Source using &lt;" + simulation.<span class="code_method">getDataStore</span>() + "&gt;...");
            
            DataStoreFactory dsf = DataStoreFactory.<span class="code_method">getInstance</span>();
            dataStore = dsf.<span class="code_method">create</span>(simulation.getDataStore());
            dataStore.<span class="code_method">open</span>(simulation.getDataStoreFile());
            
            System.out.<span class="code_print">println</span>("complete");
            
            <span class="code_comment">// Configure the simulation report if there is one defined.</span>
            <span class="code">if</span> (simulation.<span class="code_method">doFinalReport</span>()) {
                System.out.<span class="code_print">print</span>("Configuring the FinalReport using &lt;" + simulation.<span class="code_method">getFinalReportClass</span>() + "&gt;...");
                
                Class reportClazz = Class.<span class="code_method">forName</span>(simulation.getFinalReportClass());
                finalReport = (FinalReport) reportClazz.<span class="code_method">newInstance</span>();
                
                System.out.<span class="code_print">println</span>("complete");
            }
            
        }
        <span class="code">catch </span>(MarshallingException e) {
            <span class="code">throw new </span>ControllerException(e.<span class="code_method">toString</span>());
        }
        <span class="code">catch </span>(ClassNotFoundException e) {
            <span class="code">throw new </span>ControllerException(e.<span class="code_method">toString</span>());
        }
        <span class="code">catch </span>(InstantiationException e) {
            <span class="code">throw new </span>ControllerException(e.<span class="code_method">toString</span>());
        }
        <span class="code">catch </span>(IllegalAccessException e) {
            <span class="code">throw new </span>ControllerException(e.<span class="code_method">toString</span>());
        }
        <span class="code">catch </span>(PhysicalSystemFactoryException e) {
            <span class="code">throw new </span>ControllerException(e.<span class="code_method">toString</span>());
        }
        <span class="code">catch </span>(ConnectionException e) {
            <span class="code">throw new </span>ControllerException(e.<span class="code_method">toString</span>());
        }
        <span class="code">catch </span>(InvalidDataStoreException e) {
            <span class="code">throw new </span>ControllerException(e.<span class="code_method">toString</span>());
        }
        
        System.out.<span class="code_print">print</span>("Running simulation...");
        
        <span class="code_comment">// Define references to simulation properties.</span>
        <span class="code_types">double </span>timeStep = simulation.<span class="code_method">getInterval</span>();
        <span class="code_types">boolean </span>performMeasurement = simulation.<span class="code_method">getPerformMeasurement</span>();
        <span class="code_types">int </span>numberIterations = simulation.<span class="code_method">getIterations</span>();
        <span class="code_types">int </span>iterationsPerMeasurement = numberIterations/simulation.<span class="code_method">getNumberMeasurements</span>();
        
        <span class="code_comment">// Run the simulation.</span>
        <span class="code">for</span> (<span class="code_types">int </span>i = 0; i &lt; numberIterations; i++) {
            
            <span class="code_comment">// These calculations are always performed for every iteration.</span>
            physicalAlgorithm.<span class="code_method">calculate</span>(simulation, physicalSystem);
            
            <span class="code_comment">// Update the time attribute of the simulation bean.</span>
            simulation.<span class="code_method">setTime</span>(simulation.getTime() + timeStep);
            
            <span class="code_comment">// Exit if the simulation is over before the iterations are completed.</span>
            <span class="code">if</span> (!simulation.<span class="code_method">isRunning</span>()) {
               <span class="code"> try </span>{
                    dataStore.<span class="code_method">close</span>();
                }
                <span class="code">catch </span>(ConnectionException e) {
                    <span class="code">throw new </span>ControllerException(e.<span class="code_method">toString</span>());
                }
                <span class="code">finally </span>{
                    System.out.<span class="code_print">println</span>("complete");
                    
                    <span class="code">if</span> (simulation.<span class="code_method">doFinalReport</span>()) {
                        finalReport.<span class="code_method">report</span>(simulation, physicalSystem);
                    }
                    
                    <span class="code">return</span>;
                }
            }
            
            <span class="code_comment">// Test whether or not to take a user defined measurement of</span>
            <span class="code_comment">// the physical system.</span>
            <span class="code">if</span> ((performMeasurement) && ((i % iterationsPerMeasurement) == 0)) {
                
                <span class="code_comment">// Take a user defined measurement.</span>
                physicalMeasurement.<span class="code_method">take</span>(simulation, physicalSystem);
                
                <span class="code_comment">// Save the measurement to the data store.</span>
                dataStore.<span class="code_method">save</span>(physicalMeasurement);
                
                <span class="code_comment">//System.out.<span class="code_print">print</span>(".");</span>
            }
            
        }
        
        <span class="code_comment">// The simulation is complete so wrap it up.</span>
       <span class="code"> try </span>{
            dataStore.<span class="code_method">close</span>();
        }
        <span class="code">catch </span>(ConnectionException e) { 
            <span class="code">throw new </span>ControllerException(e.<span class="code_method">toString</span>());
        }
        <span class="code">finally </span>{
            System.out.<span class="code_print">println</span>("complete");
            
            <span class="code">if</span> (simulation.<span class="code_method">doFinalReport</span>()) {
                finalReport.<span class="code_method">report</span>(simulation, physicalSystem);
            }
            
            <span class="code">return</span>;
        }
        
    }
    
}
</pre>
</div>
</body>
</html>

