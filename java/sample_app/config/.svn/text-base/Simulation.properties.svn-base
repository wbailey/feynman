# Class of the physical system to use.  For user defined implementations replace below
# with something like the following:
#
# com.usercompany.userpackage.MyParticleSystem
PhysicalSystemClass=feynman.framework.system.CartesianSystem

# Should this be configurable in the following manner?  The user defines the 
# coordinate system in stead of the factory class.  The framework can support
# things like CartesianObjectFactory, SphericalObjectFactory, CylindricalObjectFactory
# and then the user can configure the following instead
PhysicalObjectFactoryClass=feynman.framework.system.CartesianObjectFactory

# User defined class of the PhysicalObject to use in the PhysicalSystem
PhysicalObjectClass=Ball

# Indicate whether to perform a final report to the user or not.
DoFinalReport=true

# Define the class that will be used to produce any kind of final report about
# the simulation.
FinalReportClass=Report

# Define the data storage mechanism to be used.
DataStore=file
#DataStore=dbms

# Define the data source destination that the measurement data will be stored in.
DataStoreFile=data.csv
#DataStoreTable=table

#Define the number of physical objects to use in the simulation.
NumberPhysicalObjects=1

# Define the number of iterations for the simulation.
Iterations=1000

#Define the time interval to the numerical integrator (if one is used).
Interval=0.01

# Define whether to take measurements during the simulation or not.
PerformMeasurement=true

# Define the number of measurements to take in the system
NumberMeasurements=500

#Define the start time of the simulation
StartTime=0.0

# Define the class to use to configure the physical System.
PhysicalConfigurationClass=Setup

# Define the class to use to perform calculations on each physical ojbect
# in the system at each timestep.
PhysicalAlgorithmClass=SimpleGravity

# Define the class to use to perform measurements on the physical System.
PhysicalMeasurementClass=Measurement
